import matplotlib.pyplot as plt
import numpy as np

##############################################################################
# 0) DATA PREPARATION
#    We'll store epoch-by-epoch logs for each dataset & fold as arrays.
#    Then we'll define code to plot everything.
##############################################################################

# ============================================================================
# DATASET A (800 samples, batch=16), 5 folds, 20 epochs
# ============================================================================
epochs_A = np.arange(1, 21)

# Fold 1
trainA_f1 = [
  4.6258, 4.5975, 4.5450, 4.3674, 4.0708, 3.6904, 3.2275, 2.7738, 2.2133, 1.8132,
  1.4541, 1.0760, 0.8113, 0.5969, 0.4174, 0.2906, 0.2100, 0.1423, 0.0972, 0.0735
]
valA_f1 = [
  4.6116, 4.6770, 4.7646, 4.8605, 5.0390, 5.0024, 5.1522, 5.2688, 5.1329, 5.4898,
  5.8090, 6.5535, 6.7044, 7.4393, 7.4241, 8.3036, 8.5963, 9.1069, 9.4696, 9.8879
]
accA_f1 = [
  0.0, 0.0125, 0.0125, 0.0063, 0.0063, 0.0187, 0.0187, 0.0375, 0.0625, 0.1000,
  0.0938, 0.1437, 0.1313, 0.1437, 0.1437, 0.1688, 0.1500, 0.1812, 0.1750, 0.1500
]

# Fold 2
trainA_f2 = [
  4.6311, 4.6045, 4.5951, 4.5150, 4.3512, 3.9878, 3.5730, 3.1156, 2.6488, 2.2292,
  1.8036, 1.4525, 1.1796, 0.8939, 0.6787, 0.5810, 0.3951, 0.2842, 0.2194, 0.1795
]
valA_f2 = [
  4.6126, 4.6216, 4.7064, 4.7554, 4.8703, 4.9085, 4.9023, 5.1364, 5.0899, 5.2461,
  5.3786, 5.6394, 6.0663, 6.2233, 6.9821, 7.0573, 7.4608, 7.9547, 8.0783, 8.6847
]
accA_f2 = [
  0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0, 0.0, 0.0063,
  0.0125, 0.0063, 0.0125, 0.0375, 0.0250, 0.0125, 0.0375, 0.0375, 0.0437, 0.0312
]

# Fold 3
trainA_f3 = [
  4.6320, 4.6050, 4.5998, 4.5009, 4.2346, 3.7487, 3.2963, 2.7977, 2.2678, 1.7637,
  1.3160, 1.0274, 0.7107, 0.5015, 0.3482, 0.2418, 0.1709, 0.1130, 0.0870, 0.0679
]
valA_f3 = [
  4.6108, 4.6171, 4.6278, 4.7831, 4.7325, 4.6099, 4.6214, 4.7724, 4.9732, 5.3056,
  5.5185, 5.4495, 6.4962, 6.7026, 7.2356, 7.4610, 7.7179, 8.3262, 8.4480, 8.5548
]
accA_f3 = [
  0.0125, 0.0063, 0.0063, 0.0, 0.0063, 0.0, 0.0, 0.0, 0.0063, 0.0063,
  0.0063, 0.0063, 0.0063, 0.0125, 0.0, 0.0063, 0.0, 0.0063, 0.0063, 0.0063
]

# Fold 4
trainA_f4 = [
  4.6243, 4.6071, 4.6024, 4.5194, 4.4037, 4.2002, 3.8529, 3.3573, 2.7981, 2.3031,
  1.8511, 1.4343, 1.1827, 0.9661, 0.7811, 0.6597, 0.4452, 0.3503, 0.2891, 0.2433
]
valA_f4 = [
  4.5987, 4.6110, 4.6441, 4.7704, 4.9042, 4.9318, 5.0008, 5.0870, 4.9386, 5.3171,
  5.6317, 5.7799, 6.1732, 6.5591, 6.6347, 6.7319, 7.0445, 7.7180, 7.9891, 8.2969
]
accA_f4 = [
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0250, 0.0187, 0.05, 0.0938, 0.0750,
  0.1062, 0.1313, 0.0938, 0.1313, 0.1187, 0.1437, 0.1688, 0.1437, 0.15, 0.1187
]

# Fold 5
trainA_f5 = [
  4.6139, 4.6051, 4.5724, 4.4323, 4.1340, 3.7471, 3.4339, 3.1023, 2.7223, 2.2863,
  1.8905, 1.5061, 1.2156, 0.9380, 0.7921, 0.5718, 0.4249, 0.3356, 0.2481, 0.1971
]
valA_f5 = [
  4.6114, 4.6235, 4.7451, 4.8463, 4.8019, 5.0532, 4.9053, 4.8244, 5.2676, 5.4215,
  5.5068, 5.7890, 6.2471, 7.0385, 6.9528, 7.3552, 8.0657, 8.4476, 9.0990, 9.7158
]
accA_f5 = [
  0.0, 0.0063, 0.0063, 0.0, 0.0125, 0.0, 0.0375, 0.0312, 0.0750, 0.0688,
  0.1062, 0.1187, 0.1437, 0.1250, 0.1437, 0.1625, 0.1812, 0.1812, 0.1625, 0.1938
]

A_train_folds = [trainA_f1, trainA_f2, trainA_f3, trainA_f4, trainA_f5]
A_val_folds   = [valA_f1,   valA_f2,   valA_f3,   valA_f4,   valA_f5]
A_acc_folds   = [accA_f1,   accA_f2,   accA_f3,   accA_f4,   accA_f5]


# ============================================================================
# DATASET B (800 samples, batch=32), 5 folds, 20 epochs
# ============================================================================
epochs_B = np.arange(1, 21)

# Fold 1
trainB_f1 = [
  4.6221, 4.6070, 4.6025, 4.5990, 4.5966, 4.5908, 4.5748, 4.5557, 4.5327, 4.4938,
  4.4479, 4.3937, 4.3281, 4.2688, 4.1934, 4.1192, 4.0403, 3.9544, 3.8722, 3.7917
]
valB_f1 = [
  4.6231, 4.6320, 4.6310, 4.6356, 4.6389, 4.6508, 4.6537, 4.6508, 4.6533, 4.6634,
  4.6799, 4.6817, 4.6699, 4.7113, 4.6719, 4.6755, 4.6989, 4.6849, 4.6530, 4.6202
]
accB_f1 = [
  0.0, 0.0063, 0.0063, 0.0, 0.0063, 0.0063, 0.0, 0.0, 0.0, 0.0,
  0.0, 0.0, 0.0063, 0.0, 0.0, 0.0125, 0.0187, 0.0187, 0.0187, 0.0312
]

# Fold 2
trainB_f2 = [
  4.6264, 4.6050, 4.6000, 4.5906, 4.5749, 4.5531, 4.5255, 4.4896, 4.4369, 4.3712,
  4.3009, 4.2293, 4.1312, 4.0394, 3.9393, 3.8323, 3.7258, 3.6164, 3.5209, 3.4333
]
valB_f2 = [
  4.6204, 4.6225, 4.6307, 4.6401, 4.6543, 4.6734, 4.7023, 4.7215, 4.7574, 4.7820,
  4.8242, 4.8256, 4.8263, 4.8336, 4.8704, 4.8174, 4.8218, 4.8031, 4.8272, 4.7629
]
accB_f2 = [
  0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0, 0.0, 0.0063,
  0.0125, 0.0063, 0.0125, 0.0375, 0.0250, 0.0125, 0.0375, 0.0375, 0.0437, 0.0312
]

# Fold 3
trainB_f3 = [
  4.6237, 4.6059, 4.6026, 4.5958, 4.5871, 4.5726, 4.5541, 4.5275, 4.4927, 4.4474,
  4.3944, 4.3310, 4.2647, 4.1897, 4.1168, 4.0368, 3.9523, 3.8720, 3.7935, 3.7163
]
valB_f3 = [
  4.6165, 4.6167, 4.6176, 4.6207, 4.6321, 4.6371, 4.6550, 4.6620, 4.6835, 4.6954,
  4.7077, 4.7143, 4.7142, 4.7009, 4.7044, 4.7032, 4.7063, 4.6811, 4.6659, 4.6656
]
accB_f3 = [
  0.0125, 0.0063, 0.0063, 0.0, 0.0063, 0.0, 0.0, 0.0, 0.0063, 0.0063,
  0.0063, 0.0063, 0.0063, 0.0125, 0.0, 0.0063, 0.0, 0.0063, 0.0063, 0.0063
]

# Fold 4
trainB_f4 = [
  4.6223, 4.6033, 4.6035, 4.6008, 4.5977, 4.5944, 4.5896, 4.5843, 4.5746, 4.5615,
  4.5478, 4.5279, 4.5060, 4.4854, 4.4484, 4.4074, 4.3717, 4.3179, 4.2563, 4.1936
]
valB_f4 = [
  4.6394, 4.6429, 4.6356, 4.6429, 4.6462, 4.6470, 4.6538, 4.6549, 4.6546, 4.6807,
  4.6652, 4.6850, 4.6850, 4.6828, 4.6953, 4.6924, 4.6965, 4.7046, 4.6895, 4.6756
]
accB_f4 = [
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0063,
  0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0, 0.0063
]

# Fold 5
trainB_f5 = [
  4.6186, 4.6025, 4.5966, 4.5884, 4.5764, 4.5586, 4.5345, 4.5065, 4.4599, 4.4021,
  4.3327, 4.2467, 4.1588, 4.0575, 3.9617, 3.8663, 3.7711, 3.6769, 3.5968, 3.5028
]
valB_f5 = [
  4.6243, 4.6329, 4.6444, 4.6503, 4.6571, 4.6788, 4.6995, 4.7194, 4.7408, 4.7847,
  4.7762, 4.8136, 4.8499, 4.8492, 4.8560, 4.8415, 4.8347, 4.8485, 4.8067, 4.7959
]
accB_f5 = [
  0.0, 0.0063, 0.0063, 0.0, 0.0, 0.0, 0.0063, 0.0063, 0.0063, 0.0063,
  0.0063, 0.0063, 0.0063, 0.0125, 0.0125, 0.0125, 0.0187, 0.0125, 0.0187, 0.0250
]

B_train_folds = [trainB_f1, trainB_f2, trainB_f3, trainB_f4, trainB_f5]
B_val_folds   = [valB_f1,   valB_f2,   valB_f3,   valB_f4,   valB_f5]
B_acc_folds   = [accB_f1,   accB_f2,   accB_f3,   accB_f4,   accB_f5]


# ============================================================================
# DATASET C (1000 samples, LR=5e-5, WD=1e-4), 5 folds, 15 epochs
# ============================================================================
epochs_C = np.arange(1, 16)

# Fold 1
trainC_f1 = [
  4.6213, 4.6070, 4.6061, 4.6032, 4.6022, 4.6001, 4.5940, 4.5893, 4.5822, 4.5720,
  4.5596, 4.5394, 4.5199, 4.4931, 4.4533
]
valC_f1 = [
  4.6154, 4.6185, 4.6209, 4.6172, 4.6222, 4.6203, 4.6226, 4.6319, 4.6266, 4.6206,
  4.6227, 4.6379, 4.6236, 4.6116, 4.5988
]
accC_f1 = [
  0.0, 0.0, 0.0, 0.0050, 0.0, 0.0050, 0.0, 0.0, 0.0050, 0.0050,
  0.01, 0.01, 0.005, 0.005, 0.005
]

# Fold 2
trainC_f2 = [
  4.6167, 4.6053, 4.6009, 4.5968, 4.5902, 4.5796, 4.5685, 4.5485, 4.5220, 4.4911,
  4.4502, 4.4065, 4.3520, 4.2973, 4.2361
]
valC_f2 = [
  4.6358, 4.6381, 4.6399, 4.6409, 4.6475, 4.6462, 4.6517, 4.6479, 4.6505, 4.6434,
  4.6305, 4.6200, 4.6208, 4.5942, 4.5932
]
accC_f2 = [
  0.0, 0.0, 0.0, 0.0, 0.0050, 0.0100, 0.0150, 0.0050, 0.0150, 0.0150,
  0.0150, 0.03, 0.005, 0.02, 0.025
]

# Fold 3
trainC_f3 = [
  4.6173, 4.6068, 4.6046, 4.6021, 4.5982, 4.5939, 4.5861, 4.5778, 4.5684, 4.5556,
  4.5412, 4.5267, 4.5072, 4.4877, 4.4631
]
valC_f3 = [
  4.6118, 4.6120, 4.6118, 4.6129, 4.6138, 4.6191, 4.6191, 4.6201, 4.6212, 4.6251,
  4.6317, 4.6293, 4.6295, 4.6334, 4.6308
]
accC_f3 = [
  0.01, 0.015, 0.01, 0.02, 0.01, 0.01, 0.0050, 0.02, 0.015, 0.02,
  0.015, 0.02, 0.025, 0.02, 0.03
]

# Fold 4
trainC_f4 = [
  4.6166, 4.6073, 4.6054, 4.6031, 4.5999, 4.5960, 4.5868, 4.5776, 4.5586, 4.5282,
  4.4915, 4.4469, 4.3948, 4.3365, 4.2765
]
valC_f4 = [
  4.6140, 4.6137, 4.6151, 4.6190, 4.6220, 4.6193, 4.6228, 4.6242, 4.6384, 4.6311,
  4.6378, 4.6334, 4.6235, 4.6170, 4.6182
]
accC_f4 = [
  0.0050, 0.0200, 0.0050, 0.0050, 0.0100, 0.0100, 0.0050, 0.0, 0.0050, 0.0050,
  0.01, 0.0050, 0.0050, 0.01, 0.01
]

# Fold 5
trainC_f5 = [
  4.6182, 4.6052, 4.6013, 4.5980, 4.5886, 4.5721, 4.5479, 4.5184, 4.4802, 4.4274,
  4.3665, 4.2969, 4.2135, 4.1321, 4.0479
]
valC_f5 = [
  4.6218, 4.6230, 4.6311, 4.6287, 4.6273, 4.6282, 4.6290, 4.6377, 4.6402, 4.6285,
  4.6287, 4.6127, 4.5696, 4.5772, 4.5370
]
accC_f5 = [
  0.0050, 0.0100, 0.0100, 0.0100, 0.0, 0.0, 0.0050, 0.0, 0.0, 0.0,
  0.0050, 0.0050, 0.0150, 0.0050, 0.01
]

C_train_folds = [trainC_f1, trainC_f2, trainC_f3, trainC_f4, trainC_f5]
C_val_folds   = [valC_f1,   valC_f2,   valC_f3,   valC_f4,   valC_f5]
C_acc_folds   = [accC_f1,   accC_f2,   accC_f3,   accC_f4,   accC_f5]


# ============================================================================
# DATASET D (1600 samples, Small CNN), 5 folds, 20 epochs
# Logs are all visible. We'll store them similarly.
# For brevity, we'll rely on the final lines from your logs. We do see partial epoch details:
# The logs only show 20 lines summary (the entire training).
# We'll store them now:
# ============================================================================
epochs_D = np.arange(1, 21)

# Fold 1
trainD_f1 = [
  4.6121, 4.6044, 4.5493, 4.1557, 3.6671, 3.3479, 3.1350, 2.9058, 2.6718, 2.4670,
  2.2093, 1.9406, 1.7316, 1.5122, 1.2962, 1.0907, 0.9046, 0.7729, 0.6326, 0.5303
]
valD_f1 = [
  4.6115, 4.6255, 4.5191, 3.9715, 3.7723, 3.7138, 3.4606, 3.4878, 3.3979, 3.4141,
  3.2771, 3.3699, 3.1979, 3.2970, 3.3717, 3.3281, 3.4081, 3.5046, 3.6808, 3.7189
]
accD_f1 = [
  0.0063, 0.0063, 0.0156, 0.0344, 0.0563, 0.0563, 0.1187, 0.1250, 0.1594, 0.1688,
  0.2219, 0.2281, 0.2656, 0.2969, 0.3063, 0.3500, 0.3438, 0.4125, 0.3844, 0.3906
]

# Fold 2
trainD_f2 = [
  4.6180, 4.6070, 4.5923, 4.3860, 3.8440, 3.4703, 3.2680, 3.1344, 2.9758, 2.8520,
  2.7290, 2.5991, 2.4396, 2.2967, 2.1387, 1.9797, 1.8228, 1.6711, 1.5273, 1.3835
]
valD_f2 = [
  4.6089, 4.6115, 4.6091, 4.3338, 3.9444, 3.6691, 3.5709, 3.5182, 3.4836, 3.4185,
  3.4475, 3.3244, 3.4453, 3.3165, 3.2619, 3.2673, 3.3760, 3.3353, 3.3265, 3.4338
]
accD_f2 = [
  0.0031, 0.0031, 0.0125, 0.0156, 0.0563, 0.0656, 0.0844, 0.1187, 0.1094, 0.1062,
  0.1219, 0.1500, 0.1469, 0.1656, 0.1844, 0.2219, 0.2281, 0.2562, 0.2719, 0.3031
]

# Fold 3
trainD_f3 = [
  4.6200, 4.6059, 4.5012, 3.9596, 3.4773, 3.1918, 2.8557, 2.5154, 2.0960, 1.6638,
  1.2890, 0.9529, 0.7240, 0.5271, 0.3554, 0.2457, 0.1927, 0.1148, 0.0904, 0.0637
]
valD_f3 = [
  4.6040, 4.6024, 4.3435, 3.9297, 3.6827, 3.5347, 3.4086, 3.2941, 3.2983, 3.0472,
  2.7992, 2.8805, 2.9881, 2.9623, 3.1537, 3.3599, 3.4071, 3.7338, 3.7172, 3.8129
]
accD_f3 = [
  0.0063, 0.0094, 0.0344, 0.0344, 0.0750, 0.1344, 0.1313, 0.2031, 0.2531, 0.3031,
  0.3656, 0.4125, 0.4156, 0.4656, 0.4562, 0.4562, 0.4813, 0.4719, 0.4500, 0.4906
]

# Fold 4
trainD_f4 = [
  4.6124, 4.6060, 4.5779, 4.4428, 3.8602, 3.3125, 2.9003, 2.4612, 1.9907, 1.5996,
  1.2569, 0.9245, 0.7162, 0.5083, 0.3906, 0.3005, 0.2239, 0.1524, 0.1066, 0.0781
]
valD_f4 = [
  4.6104, 4.6174, 4.6706, 4.5270, 4.0543, 3.7921, 3.6378, 3.3634, 3.4430, 3.1367,
  3.1600, 3.3078, 3.2395, 3.5827, 3.6682, 3.7129, 3.8239, 4.0474, 4.3635, 4.3739
]
accD_f4 = [
  0.0063, 0.0063, 0.0063, 0.0219, 0.0437, 0.0750, 0.1313, 0.1938, 0.2188, 0.2750,
  0.3094, 0.3250, 0.3563, 0.3688, 0.3688, 0.3781, 0.3875, 0.4188, 0.4219, 0.4313
]

# Fold 5
trainD_f5 = [
  4.6207, 4.6059, 4.5967, 4.5600, 4.5018, 4.4439, 4.3618, 4.1181, 3.6196, 3.1659,
  2.8371, 2.5578, 2.3096, 2.0978, 1.8698, 1.6555, 1.4587, 1.2755, 1.1463, 0.9630
]
valD_f5 = [
  4.6108, 4.6181, 4.6259, 4.7101, 4.7941, 4.8306, 4.8589, 4.5155, 4.0708, 3.8247,
  3.6276, 3.7948, 3.5814, 3.6080, 3.6595, 3.7291, 3.8279, 4.1621, 4.1729, 4.3372
]
accD_f5 = [
  0.0031, 0.0031, 0.0094, 0.0063, 0.0094, 0.0063, 0.0094, 0.0469, 0.0656, 0.1156,
  0.1187, 0.1281, 0.1469, 0.1750, 0.1625, 0.2156, 0.2781, 0.2437, 0.2750, 0.2938
]

D_train_folds = [trainD_f1, trainD_f2, trainD_f3, trainD_f4, trainD_f5]
D_val_folds   = [valD_f1,   valD_f2,   valD_f3,   valD_f4,   valD_f5]
D_acc_folds   = [accD_f1,   accD_f2,   accD_f3,   accD_f4,   accD_f5]


# ============================================================================
# DATASET E (5000 samples, Small CNN), 5 folds, 20 epochs
# From your logs, we have 20 epochs for each fold.
# ============================================================================
epochs_E = np.arange(1, 21)

# Fold 1
trainE_f1 = [
  4.6086, 4.6068, 4.6069, 4.1902, 3.2181, 2.7235, 2.2575, 1.8205, 1.4827, 1.2551,
  1.0820, 0.9249, 0.7990, 0.6877, 0.5853, 0.5013, 0.4089, 0.3512, 0.2970, 0.2444
]
valE_f1 = [
  4.6089, 4.6103, 4.6115, 3.5562, 3.0421, 2.7020, 2.3185, 2.0510, 1.8422, 1.7754,
  1.7114, 1.7669, 1.7381, 1.7116, 1.6845, 1.7091, 1.8393, 1.8242, 1.9357, 2.0167
]
accE_f1 = [
  0.0060, 0.0100, 0.0060, 0.0600, 0.1630, 0.2370, 0.3700, 0.4710, 0.5440, 0.5670,
  0.5870, 0.5730, 0.5900, 0.6190, 0.6230, 0.6260, 0.6360, 0.6350, 0.6440, 0.6330
]

# Fold 2
trainE_f2 = [
  4.6096, 4.6067, 4.6053, 4.6008, 4.1718, 3.4141, 3.1677, 2.9866, 2.8461, 2.7131,
  2.5877, 2.4795, 2.3623, 2.2571, 2.1554, 2.0545, 1.9537, 1.8567, 1.7737, 1.6999
]
valE_f2 = [
  4.6106, 4.6129, 4.6221, 4.6265, 3.6182, 3.3371, 3.1757, 3.0250, 2.9662, 2.8083,
  2.7679, 2.6473, 2.6037, 2.5390, 2.4114, 2.3110, 2.2259, 2.2228, 2.1985, 2.1333
]
accE_f2 = [
  0.0040, 0.0040, 0.0080, 0.0090, 0.0510, 0.0920, 0.1300, 0.1590, 0.1750, 0.2460,
  0.2340, 0.2860, 0.3240, 0.3420, 0.3850, 0.4180, 0.4570, 0.4600, 0.4770, 0.4870
]

# Fold 3
trainE_f3 = [
  4.6096, 4.6074, 4.6068, 4.6033, 4.4289, 3.4511, 3.0134, 2.7737, 2.5809, 2.4002,
  2.2245, 2.0733, 1.8974, 1.7492, 1.6149, 1.4941, 1.4019, 1.3115, 1.2158, 1.1457
]
valE_f3 = [
  4.6082, 4.6110, 4.6114, 4.6136, 3.8830, 3.3190, 3.1270, 3.0252, 2.8341, 2.7968,
  2.6862, 2.6266, 2.4874, 2.4402, 2.3827, 2.4000, 2.3071, 2.3593, 2.3304, 2.3530
]
accE_f3 = [
  0.0060, 0.0060, 0.0070, 0.0090, 0.0550, 0.1170, 0.1350, 0.1700, 0.2610, 0.2740,
  0.3100, 0.3420, 0.3880, 0.4220, 0.4470, 0.4460, 0.4910, 0.4660, 0.4850, 0.4830
]

# Fold 4
trainE_f4 = [
  4.6106, 3.9490, 3.2791, 2.9622, 2.6657, 2.3350, 1.9804, 1.6474, 1.4005, 1.2260,
  1.0775, 0.9687, 0.8640, 0.7715, 0.6841, 0.6178, 0.5664, 0.4928, 0.4406, 0.3913
]
valE_f4 = [
  4.5867, 3.4817, 3.2209, 3.0203, 2.7101, 2.4695, 2.2311, 1.9906, 1.9167, 1.8817,
  1.8163, 1.7053, 1.7355, 1.7616, 1.7716, 1.7950, 1.8707, 1.8267, 1.8613, 1.9693
]
accE_f4 = [
  0.0140, 0.0770, 0.1220, 0.1570, 0.2590, 0.3490, 0.4180, 0.4920, 0.5120, 0.5370,
  0.5690, 0.5940, 0.5920, 0.6010, 0.6080, 0.6000, 0.6030, 0.6090, 0.6220, 0.6270
]

# Fold 5
trainE_f5 = [
  4.6110, 4.6067, 4.3057, 3.3807, 2.9748, 2.6672, 2.3446, 2.0237, 1.7751, 1.5735,
  1.4019, 1.2797, 1.1540, 1.0485, 0.9489, 0.8794, 0.7944, 0.7373, 0.6668, 0.6081
]
valE_f5 = [
  4.6078, 4.6117, 3.6709, 3.2351, 3.0351, 2.7476, 2.4899, 2.2672, 2.0966, 2.0603,
  1.9289, 1.9477, 1.7956, 1.8245, 1.7793, 1.7723, 1.6901, 1.7279, 1.7791, 1.7664
]
accE_f5 = [
  0.0050, 0.0110, 0.0580, 0.1120, 0.1740, 0.2640, 0.3500, 0.4080, 0.4760, 0.4930,
  0.5160, 0.5260, 0.5540, 0.5730, 0.5870, 0.5840, 0.6040, 0.6030, 0.6040, 0.6370
]

E_train_folds = [trainE_f1, trainE_f2, trainE_f3, trainE_f4, trainE_f5]
E_val_folds   = [valE_f1,   valE_f2,   valE_f3,   valE_f4,   valE_f5]
E_acc_folds   = [accE_f1,   accE_f2,   accE_f3,   accE_f4,   accE_f5]


# ============================================================================
# DATASET F (10000 samples, Small CNN), 5 folds, 20 epochs
# ============================================================================
epochs_F = np.arange(1, 21)

# Fold 1
trainF_f1 = [
  4.0929, 2.8730, 1.8701, 1.3287, 1.0180, 0.8233, 0.6668, 0.5557, 0.4620, 0.3920,
  0.3273, 0.2757, 0.2340, 0.1982, 0.1614, 0.1501, 0.1281, 0.1110, 0.0996, 0.0828
]
valF_f1 = [
  3.2877, 2.2962, 1.5953, 1.2835, 1.1926, 1.0584, 1.0027, 0.9372, 0.9884, 0.9366,
  0.9127, 0.9369, 0.9913, 0.9022, 0.9050, 0.9817, 1.0516, 1.0095, 0.9304, 1.0251
]
accF_f1 = [
  0.1070, 0.3900, 0.5895, 0.6755, 0.6945, 0.7255, 0.7410, 0.7625, 0.7495, 0.7725,
  0.7895, 0.7850, 0.7860, 0.8030, 0.8040, 0.7975, 0.7970, 0.8090, 0.8220, 0.7935
]

# Fold 2
trainF_f2 = [
  4.6091, 4.6064, 4.6054, 4.6039, 4.6005, 4.5957, 4.5903, 4.5851, 4.5804, 4.5760,
  4.5726, 4.5691, 4.5656, 4.3236, 3.0768, 2.4596, 2.0934, 1.8340, 1.6357, 1.4827
]
valF_f2 = [
  4.6083, 4.6100, 4.6126, 4.6157, 4.6219, 4.6182, 4.6210, 4.6280, 4.6400, 4.6510,
  4.6361, 4.6556, 4.6498, 3.7107, 2.8101, 2.3776, 2.1323, 1.9240, 1.7785, 1.6501
]
accF_f2 = [
  0.0065, 0.0065, 0.0095, 0.0095, 0.0125, 0.0085, 0.0130, 0.0100, 0.0115, 0.0115,
  0.0090, 0.0120, 0.0120, 0.0795, 0.2630, 0.3965, 0.4675, 0.5235, 0.5725, 0.5955
]

# Fold 3
trainF_f3 = [
  4.5131, 3.3402, 2.8379, 2.4031, 1.9441, 1.6064, 1.3701, 1.1794, 1.0517, 0.9398,
  0.8549, 0.7752, 0.7190, 0.6676, 0.6216, 0.5635, 0.5400, 0.5088, 0.4748, 0.4499
]
valF_f3 = [
  3.9156, 3.1182, 2.7399, 2.2960, 1.8969, 1.6845, 1.5027, 1.3352, 1.2431, 1.2407,
  1.1415, 1.1399, 1.1085, 1.0773, 1.0236, 1.0605, 1.0002, 1.0158, 0.9990, 0.9665
]
accF_f3 = [
  0.0455, 0.1445, 0.2560, 0.4030, 0.5195, 0.5675, 0.5995, 0.6580, 0.6755, 0.6655,
  0.6925, 0.7040, 0.7105, 0.7250, 0.7525, 0.7400, 0.7545, 0.7485, 0.7390, 0.7605
]

# Fold 4
trainF_f4 = [
  4.0798, 3.2085, 2.6969, 2.0450, 1.5355, 1.2161, 0.9928, 0.8335, 0.7147, 0.6182,
  0.5393, 0.4696, 0.4305, 0.3700, 0.3243, 0.2943, 0.2641, 0.2383, 0.2237, 0.1926
]
valF_f4 = [
  3.4073, 2.9764, 2.4243, 1.8846, 1.5312, 1.4307, 1.2161, 1.1669, 1.0909, 1.0995,
  1.0468, 1.0757, 1.0057, 0.9983, 1.0197, 1.0375, 0.9939, 1.0718, 1.0551, 1.0474
]
accF_f4 = [
  0.0645, 0.1620, 0.3615, 0.5280, 0.6090, 0.6355, 0.6890, 0.7005, 0.7125, 0.7270,
  0.7520, 0.7430, 0.7690, 0.7740, 0.7705, 0.7740, 0.7790, 0.7690, 0.7765, 0.7880
]

# Fold 5
trainF_f5 = [
  4.3645, 3.2324, 2.8212, 2.5233, 2.2066, 1.9076, 1.6878, 1.5241, 1.3883, 1.2895,
  1.1919, 1.1210, 1.0500, 0.9858, 0.9351, 0.8993, 0.8458, 0.8208, 0.7749, 0.7452
]
valF_f5 = [
  3.6532, 3.0796, 2.7435, 2.4768, 2.2254, 1.9819, 1.7821, 1.6557, 1.5806, 1.4931,
  1.4914, 1.4222, 1.3637, 1.3038, 1.3456, 1.2942, 1.2312, 1.2379, 1.2409, 1.2321
]
accF_f5 = [
  0.0565, 0.1540, 0.2620, 0.3590, 0.4270, 0.4975, 0.5420, 0.5695, 0.5910, 0.6160,
  0.6150, 0.6275, 0.6535, 0.6655, 0.6480, 0.6635, 0.6850, 0.6830, 0.6855, 0.6895
]

F_train_folds = [trainF_f1, trainF_f2, trainF_f3, trainF_f4, trainF_f5]
F_val_folds   = [valF_f1,   valF_f2,   valF_f3,   valF_f4,   valF_f5]
F_acc_folds   = [accF_f1,   accF_f2,   accF_f3,   accF_f4,   accF_f5]


##############################################################################
# FINAL EPOCH (FOLD) METRICS (train_loss, val_loss, val_acc) for bar charts
##############################################################################

datasets_final = {
    'A(800@16)': {
      'train_loss': [0.0735, 0.1795, 0.0679, 0.2433, 0.1971],
      'val_loss':   [9.8879, 8.6847, 8.5548, 8.2969, 9.7158],
      'val_acc':    [0.1500, 0.1750, 0.1500, 0.1187, 0.1938]
    },
    'B(800@32)': {
      'train_loss': [3.7917, 3.4333, 3.7163, 4.1936, 3.5028],
      'val_loss':   [4.6202, 4.7629, 4.6656, 4.6756, 4.7959],
      'val_acc':    [0.03125, 0.03125, 0.00625, 0.00625, 0.02500]
    },
    'C(1000)': {
      'train_loss': [4.4533, 4.2361, 4.4631, 4.2765, 4.0479],
      'val_loss':   [4.5988, 4.5932, 4.6308, 4.6182, 4.5370],
      'val_acc':    [0.0050, 0.0250, 0.0300, 0.0100, 0.0100]
    },
    'D(1600)': {
      'train_loss': [0.5303, 1.3835, 0.0637, 0.0781, 0.9630],
      'val_loss':   [3.7189, 3.4338, 3.8129, 4.3739, 4.3372],
      'val_acc':    [0.390625, 0.303125, 0.490625, 0.43125, 0.29375]
    },
    'E(5000)': {
      'train_loss': [0.2444, 1.6999, 1.1457, 0.3913, 0.6081],
      'val_loss':   [2.0167, 2.1333, 2.3530, 1.9693, 1.7664],
      'val_acc':    [0.6330, 0.4870, 0.4830, 0.6270, 0.6370]
    },
    'F(10000)': {
      'train_loss': [0.0828, 1.4827, 0.4499, 0.1926, 0.7452],
      'val_loss':   [1.0251, 1.6501, 0.9665, 1.0474, 1.2321],
      'val_acc':    [0.7935, 0.5955, 0.7605, 0.7880, 0.6895]
    }
}


##############################################################################
# 1) PLOT FINAL FOLD METRICS (BAR CHARTS)
##############################################################################
def plot_final_fold_metrics(datasets_dict, metric_key, plot_title, ylabel, output_filename):
    dataset_names = list(datasets_dict.keys())  # e.g. ['A(800@16)', 'B(800@32)', ...]
    folds = np.arange(1,6)
    width = 0.12
    x_base = np.arange(len(folds))

    plt.figure(figsize=(10,6))

    num_datasets = len(dataset_names)
    for i, ds_name in enumerate(dataset_names):
        metric_vals = datasets_dict[ds_name][metric_key]  # 5 folds
        offset = (i - (num_datasets-1)/2)*width
        plt.bar(x_base + offset, metric_vals, width=width, label=ds_name)

    plt.xticks(x_base, [f'Fold {f}' for f in folds])
    plt.xlabel('Fold')
    plt.ylabel(ylabel)
    plt.title(plot_title)
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig(output_filename, dpi=300)
    plt.close()
    print(f"Saved {output_filename}")

def generate_final_fold_charts():
    plot_final_fold_metrics(
        datasets_dict=datasets_final,
        metric_key='train_loss',
        plot_title='Final Fold Training Loss (Datasets A-F)',
        ylabel='Train Loss (Final Epoch)',
        output_filename='Final_fold_train_loss.png'
    )

    plot_final_fold_metrics(
        datasets_dict=datasets_final,
        metric_key='val_loss',
        plot_title='Final Fold Validation Loss (Datasets A-F)',
        ylabel='Val Loss (Final Epoch)',
        output_filename='Final_fold_val_loss.png'
    )

    plot_final_fold_metrics(
        datasets_dict=datasets_final,
        metric_key='val_acc',
        plot_title='Final Fold Validation Accuracy (Datasets A-F)',
        ylabel='Val Accuracy (Final Epoch)',
        output_filename='Final_fold_val_accuracy.png'
    )


##############################################################################
# 2) PLOT MULTI-FOLD EPOCH-BY-EPOCH LINES FOR EACH DATASET
##############################################################################
def plot_all_folds_for_dataset(dataset_label, epochs, train_folds, val_folds, acc_folds, out_prefix):
    """
    Overlays the 5 folds in three subplots:
      - Train Loss vs. Epoch
      - Val Loss vs. Epoch
      - Val Acc vs. Epoch
    Saves as out_prefix + '_AllFolds.png'.
    """
    plt.figure(figsize=(12,10))

    # 1) Training Loss
    plt.subplot(3,1,1)
    for f_idx in range(5):
        plt.plot(epochs, train_folds[f_idx], marker='o', label=f'Fold {f_idx+1}')
    plt.title(f'{dataset_label} - Training Loss (All Folds)')
    plt.xlabel('Epoch')
    plt.ylabel('Train Loss')
    plt.legend()
    plt.grid(True, alpha=0.3)

    # 2) Validation Loss
    plt.subplot(3,1,2)
    for f_idx in range(5):
        plt.plot(epochs, val_folds[f_idx], marker='o', label=f'Fold {f_idx+1}')
    plt.title(f'{dataset_label} - Validation Loss (All Folds)')
    plt.xlabel('Epoch')
    plt.ylabel('Val Loss')
    plt.legend()
    plt.grid(True, alpha=0.3)

    # 3) Validation Accuracy
    plt.subplot(3,1,3)
    for f_idx in range(5):
        plt.plot(epochs, acc_folds[f_idx], marker='o', label=f'Fold {f_idx+1}')
    plt.title(f'{dataset_label} - Validation Accuracy (All Folds)')
    plt.xlabel('Epoch')
    plt.ylabel('Val Accuracy')
    plt.ylim([0,1])
    plt.legend()
    plt.grid(True, alpha=0.3)

    plt.tight_layout()
    save_name = f"{out_prefix}_AllFolds.png"
    plt.savefig(save_name, dpi=300)
    plt.close()
    print(f"Saved {save_name}")

def generate_all_dataset_lineplots():
    # Dataset A
    plot_all_folds_for_dataset(
        "Dataset A(800@16)", epochs_A, A_train_folds, A_val_folds, A_acc_folds, 
        out_prefix="DatasetA"
    )
    # Dataset B
    plot_all_folds_for_dataset(
        "Dataset B(800@32)", epochs_B, B_train_folds, B_val_folds, B_acc_folds,
        out_prefix="DatasetB"
    )
    # Dataset C
    plot_all_folds_for_dataset(
        "Dataset C(1000)", epochs_C, C_train_folds, C_val_folds, C_acc_folds,
        out_prefix="DatasetC"
    )
    # Dataset D
    plot_all_folds_for_dataset(
        "Dataset D(1600)", epochs_D, D_train_folds, D_val_folds, D_acc_folds,
        out_prefix="DatasetD"
    )
    # Dataset E
    plot_all_folds_for_dataset(
        "Dataset E(5000)", epochs_E, E_train_folds, E_val_folds, E_acc_folds,
        out_prefix="DatasetE"
    )
    # Dataset F
    plot_all_folds_for_dataset(
        "Dataset F(10000)", epochs_F, F_train_folds, F_val_folds, F_acc_folds,
        out_prefix="DatasetF"
    )

##############################################################################
# MAIN EXECUTION
##############################################################################
if __name__ == "__main__":
    # 1) Generate bar charts of final fold metrics
    generate_final_fold_charts()

    # 2) Generate line plots of all folds for each dataset
    generate_all_dataset_lineplots()

    print("\nAll plots generated and saved in current folder:\n"
          "  - Final_fold_train_loss.png\n"
          "  - Final_fold_val_loss.png\n"
          "  - Final_fold_val_accuracy.png\n"
          "  - DatasetA_AllFolds.png\n"
          "  - DatasetB_AllFolds.png\n"
          "  - DatasetC_AllFolds.png\n"
          "  - DatasetD_AllFolds.png\n"
          "  - DatasetE_AllFolds.png\n"
          "  - DatasetF_AllFolds.png\n")

    # You now have a comprehensive set of visualizations for every dataset & fold.
